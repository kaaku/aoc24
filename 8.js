const input = `\
..................................w...............
..................................................
.....................................C............
......................................3...........
.............b.......u.........w...........3......
...........................u......................
...8........K...........u.......y.........I.......
..................................P5........B.....
...U................2.P...............B...C.......
............i......x.P........w......s.C......IB5.
..............t....................y....x.........
.......8............K....1.......w............u...
.................i.............r.........s........
..2.............t..T.K.......r......8..........I..
8..............t..T.....r...................5.....
...2........................1....M.t...N....x.....
...V....U.......................N.S..........I....
.........W...i............O....v............S.....
................L...1...s.fT.....x............3...
....6.......C...N.........Tf.3....................
...6.......F..........V..........k...N......H.....
...................U..f........0......H.y.........
.......................O...P......0...............
.......L..U....m.......R............s.............
6...i.................O....0.2.........H.....B....
........................R......H.........S........
......F.....c..........m..............d...........
................F.L.....m..................7......
.............J.........................S..........
.b....j.k..............V0.........................
.................L.....K..........................
.......F.......J..............r.....M.............
......................m1....a.R...7...............
.......4......Y..6.D..............................
k............9.......D................M...........
.....Xb.................V...h.....................
A.........9.Xl..........D......R..................
4.............c..d........D.............7.........
.A.4.............c.............M.7.v..............
..........n.9........................h............
...j....bd.........f.....p..W.....................
.............k.........p..........................
.......W4.......p......X.....5..J.....v...........
........W.d..c......A........n..v.....o...........
..........l.....n..........o......Y...h...........
.....A............................................
..j..........n....................................
a9.lX..................Y...........o..............
.......a.................Y..........o.............
...a....l.......................p.................\
`;

const MAP = input.split('\n').map(row => row.split(''));
const WIDTH = MAP[0].length;
const HEIGHT = MAP.length;
const ANTENNAS_BY_ID = {};

MAP.forEach((row, y) => row.forEach((cell, x) => {
    if (cell !== '.') {
        ANTENNAS_BY_ID[cell] = [...(ANTENNAS_BY_ID[cell] ?? []), [x, y]];
    }
}));

function isInsideMap([x, y]) {
    return x >= 0 && y >= 0 && x < HEIGHT && y < WIDTH;
}

function getNextPointsOnLine(point1, point2, distance = 1) {
    const [x1, y1] = point1;
    const [x2, y2] = point2;
    const dx = x2 - x1;
    const dy = y2 - y1;
    return [
        [x2 + dx * distance, y2 + dy * distance],
        [x1 - dx * distance, y1 - dy * distance],
    ].filter(isInsideMap);
}

function getAllPointsOnLine(point1, point2) {
    const points = [point1, point2];
    let distance = 1;
    let nextPoints = getNextPointsOnLine(point1, point2, distance);
    while (nextPoints.length > 0) {
        points.push(...nextPoints);
        nextPoints = getNextPointsOnLine(point1, point2, distance++);
    }

    return points;
}

function encodePoint([x, y]) {
    return `${x}|${y}`;
}

const partOneAntinodes = new Set();
const partTwoAntinodes = new Set();
Object.values(ANTENNAS_BY_ID)
    .filter(antennaGroup => antennaGroup.length > 1)
    .forEach(antennaGroup => {
        for (let i = 0; i < antennaGroup.length; i++) {
            for (let j = 1; j < antennaGroup.length; j++) {
                if (i !== j) {
                    // Part 1
                    getNextPointsOnLine(antennaGroup[i], antennaGroup[j])
                        .map(encodePoint)
                        .forEach(point => partOneAntinodes.add(point));
                    // Part 2
                    getAllPointsOnLine(antennaGroup[i], antennaGroup[j])
                        .map(encodePoint)
                        .forEach(point => partTwoAntinodes.add(point));
                }
            }
        }
    });

console.log('Antinode count (part 1):', partOneAntinodes.size);
console.log('Antinode count (part 2):', partTwoAntinodes.size);
